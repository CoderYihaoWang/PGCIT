1. classes Cow, Chicken and Dragon all extends class Animal. This is an example of inheritance. Cow, Chicken and Dragon all inherited value, feed() and other methods from the class Animal.
2. private variables can only be accessed within the class it is declared in. Protected variables can be accessed in both the same class, and through any directly and indirectly derived classes of the class in which the variable is declared. In this assignment the Animal class field 'value' is declared as protected, this is because it is intended to be inherited by all derived classes. If is declared as private, then the derived classes cannot get access to it.
3. Animal class is an abstract class which prohibits instantiation. The designer chose to make it abstract, perhaps because it does not make sense to have an instance of a general animal.
4. Using interfaces will make sure that the required method can be found on a certain instance. If an object has not implemented a certain interface, then we cannot assume that we can call interface methods on that object. This will switch the run-time error to a compilation error. It is good to fail early. Use IProductionAnimal interface, we can differentiate the production animals from other animals, and make sure we only harvest the production ones. Second, interfaces allow potential multi-inheritances, because no actual implementations are included. This allows programmers to multi-inherit, and at the same time prevent the problem arising from multi-inheritance(the death diamond).
5. Generally I think it will be a good idea to switch Animal from an abstract class to an interface. The main reason to use abstract classes instead of interfaces is with abstract classes you can provide partial implementation, instance variables which are not constants, and accessibility modifiers which are not public. We do not need any of them in this case. So in this case, interfaces will be the better choice, which also allows multi-inheritance in addition.
